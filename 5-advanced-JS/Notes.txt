  Primitives:
    - Numbers
    - Strings
    - Booleans
    - Undefined
    - Null

   Everything else is an object
    - Arrays
    - Functions
    - Objects
    - Dates
    - Wrappers for:
      - Numbers
      - Strings
      - Booleans

  Object Oriented Programmings
    - They interact with one and another to create complex applications.
    - Objects interacting with one through methods and properties.
    - Used to store data, structure applications into modules and keeping code clean.
    - We can create a blue print of an object rather than creating individual objects as we have done in the past.

              Person                In other languages this would be called a class, but in JavaScript it is
              ------                called a Constructor or Prototype.
              name
              yearOfBirth
              job
              calculateAge()
    - Based on the Constructor we can create as many Instances as we want such as 'John','Mark' and 'Jane' each
      having the same properties and methods as the Constructor defined above and they would be person instances,
      these are all objects.
    - Inheritance:
              Athlete
              -------
              olympics
              olympicMedals
              allowedOlympics()
        -   All the Athletes need to have the same properties as the person Constructor

              Person
                |
               From
                |
              Athlete  - Inherits from Person
               olympics
               olympicMedals
               allowedOlympics()
               name
               yearOfBirth
               job
               calculateAge()

 Prototypes
  - JavaScript is a prototype language which means every object has a prototype prototype property.
               Person
               ------
               Prototype
               calculateAge()
  - Inheritance is made possible by the prototype property that every object has.
  - The prototype property is where whe put properties and methods that we want other objects to inherit.

  - The person constructor object is an instance of a higher level object called 'Object'

              john                            person      |                   object                   null
              ----                            ------      |                   ------                   ----
              John                               |        |                      |
              1998        --------->          Prototype   |    ---------->    Prototype   ---------->  No Prototype
              teacher                         ---------                       ---------                ------------
                 |                            CalculateAge()                     |
              -------                                                         hasOwnProperty()
              Prototype                                                       isPrototypePf()
                                                                              constructor()
                                                                              toString()
                                                                                   .
                                                                                   .
                                                                                   .
                                                                               valueOf()

  - Each an every object that we create has an instance of the 'object' constructor which contains a bunch of methods
    in it's 'prototype' property.
  - The person objects inherits the object methods and call them, the true is the same for the 'john' object.

    THIS IS THE PROTOTYPE CHAIN
    ---------------------------

    - Every JavaScript object has a prototype property, which makes inheritance possible in JavaScript.
    - The prototype property of an object is where we put methods and properties that we want other objects to inherit.
    - The Constructor's prototype property is NOT the prototype of the Constructor itself, it's the prototype of ALL
      instances that are created through it.
    - When a certain method (or property) is called, the search start in the object itself, and if it cannot be found,
      the search moves on to the object's prototype. This continues until the method (or property) is found.


Functions are also objects.
    - A function is an instance of the Object type.
    - A function behaves like any other object.
    - We can store functions in a variable.
    - We can pass a function as an argument to another function.
    - We can also return a function from a function.
    - We say in JavaScript we have first-class functions.

Call Back Functions
    Why do we need Callbacks?
    For one very important reason — JavaScript is an event driven language. This means that instead of waiting for a
    response before moving on, JavaScript will keep executing while listening for other events.
    Lets look at a basic example:
        function first(){
          console.log(1);
        }
        function second(){
          console.log(2);
        }
        first();
        second();
    As you would expect, the function first is executed first, and the function second is executed second — logging
    the following to the console:
    Outputs: 1
    Outputs: 2

    All good so far.

    But what if function first contains some sort of code that can’t be executed immediately? For example,
    an API request where we have to send the request then wait for a response? To simulate this action, were going
    to use setTimeout which is a JavaScript function that calls a function after a set amount of time.
    We’ll delay our function for 500 milliseconds to simulate an API request. Our new code will look like this:

        function first(){
          // Simulate a code delay
          setTimeout( function(){
            console.log(1);
          }, 500 );
        }
        function second(){
          console.log(2);
        }
        first();
        second();

    It’s not important that you understand how setTimeout() works right now. All that matters is that you see
    we’ve moved our console.log(1); inside of our 500 millisecond delay. So what happens now when we invoke
    our functions?
        first();
        second();
    Outputs: 2
    Outputs: 1

    Even though we invoked the first() function first, we logged out the result of that function after the second()
    function.
    It’s not that JavaScript did not execute our functions in the order we wanted it to, it’s instead that JavaScript
    did not wait for a response from first() before moving on to execute second().
    So why show you this? Because you can’t just call one function after another and hope they execute in the
    right order. Callbacks are a way to make sure certain code does not execute until other code has already finished
    execution.

    Ask Questions challenge extended version:
    -----------------------------------------

    Steps following debugger:

    1)  (function() {
    2)  Question.prototype.displayQuestion = function() {
                console.log(this.question);
                for (var i = 0; i < this.answers.length; i++) {
                    console.log(i + ': ' + this.answers[i]);
                }
    3)     Question.prototype.checkAnswer = function(ans, callback) {
                var sc;

                if (ans === this.correct) {
                    console.log('Correct answer!');
                    sc = callback(true);
                } else {
                    console.log('Wrong answer. Try again :)');
                    sc = callback(false);
                }

                this.displayScore(sc);
            }
    4)  Question.prototype.displayScore = function(score) {
            console.log('Your current score is: ' + score);
            console.log('------------------------------');
        }
    5)  var q1 = new Question('Is JavaScript the coolest programming language in the world?',
                              ['Yes', 'No'], 0);
    6)  function Question(question, answers, correct) {
            this.question = question;
            this.answers = answers;
            this.correct = correct;
        }
    7)  var q2 = new Question('What is the name of this course\'s teacher?',
                              ['John', 'Micheal', 'Jonas'], 2);
        Then Step 6) again.
        -------------------
    8)  var q3 = new Question('What does best describe coding?',
                              ['Boring', 'Hard', 'Fun', 'Tedious'], 2);
        Then Step 6) again.
        -------------------
    9)  var questions = [q1, q2, q3];
        Creates the question array.
        ---------------------------
    10) var keepScore = score();
    11) function score() {
            var sc = 0;
            return function(correct) {
                if (correct) {
                    sc++;
                }
                return sc;
            }
        }
        The variable 'sc' for score it set to zero.
        -------------------------------------------
    12) nextQuestion();
        At this point everything is setup ready for the execution of the script.
        ------------------------------------------------------------------------
    13) function nextQuestion() {
            var n = Math.floor(Math.random() * questions.length);
            questions[n].displayQuestion();
            var answer = prompt('Please select the correct answer.');
            if(answer !== 'exit') {
                questions[n].checkAnswer(parseInt(answer), keepScore);
                nextQuestion();
            }
        }

    14) Question.prototype.displayQuestion = function() {
            console.log(this.question);
            for (var i = 0; i < this.answers.length; i++) {
                console.log(i + ': ' + this.answers[i]);
            }
            Displays the question
            ---------------------
            Displays the the answers
            ------------------------
    15) Question.prototype.checkAnswer = function(ans, callback) {
            var sc;
            if (ans === this.correct) {
                console.log('Correct answer!');
                sc = callback(true);
            } else {
                console.log('Wrong answer. Try again :)');
                sc = callback(false);
            }
            this.displayScore(sc);
        }

        var keepScore = score();
        Keeps the score when updated by Step 17)
        ----------------------------------------
    16) function score() {
            return function(correct) {
                if (correct) {
                    sc++;
                }
                return sc;
            }
        }

        var keepScore = score();
        Keeps the score when updated by Step 17)
        ----------------------------------------
    17) Question.prototype.displayScore = function(score) {
            console.log('Your current score is: ' + score);
            console.log('------------------------------');
        }
    18) function nextQuestion() {
            var n = Math.floor(Math.random() * questions.length);
            questions[n].displayQuestion();
            var answer = prompt('Please select the correct answer.');
            if(answer !== 'exit') {
                questions[n].checkAnswer(parseInt(answer), keepScore);
                nextQuestion();
            }
        }
        Back to the beginning of this function and the Step 14)
        -------------------------------------------------------